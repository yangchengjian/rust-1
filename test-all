#!/bin/bash

set -e

# Make sure the Tensorflow version in the -sys build script matches the one in
# the run-valgrind script.
version_build_script=`grep "const VERSION" tensorflow-sys/build.rs | sed 's|.*"\([^"]*\)";|\1|g'`
version_run_valgrind=`grep "tensorflow_version=" run-valgrind | sed "s|.*=\(.*\)|\1|g"`
if [[ "${version_build_script}" != "${version_run_valgrind}" ]]; then
    echo "ERROR: Tensorflow version specified in build script does not match the one in the"
    echo "       valgrind run script."
    echo "       tensorflow-sys/build.rs: ${version_build_script}"
    echo "       run-valgrind: ${version_run_valgrind}"
    exit 1
fi

# Make sure the crate version matches the one in README.md.
version_tensorflow_crate=`grep "^version =" Cargo.toml | sed 's|.*= "\(.*\)"|\1|g'`
version_tensorflow_readme=`sed -En 's|tensorflow *= *"([^"]*)"|\1|p' < README.md`
version_tensorflow_readme2=`sed -En 's|tensorflow *= *\{ *version *= *"([^"]*)".*$|\1|p' < README.md`
if [[ "${version_tensorflow_crate}" != "${version_tensorflow_readme}" || \
          "${version_tensorflow_crate}" != "${version_tensorflow_readme2}" ]]; then
    echo "ERROR: tensorflow crate version does not match the ones in README.md."
    echo "       Cargo.toml: ${version_tensorflow_crate}"
    echo "       README.md: ${version_tensorflow_readme}"
    echo "       README.md: ${version_tensorflow_readme2}"
    exit 1
fi

# Make sure the crate version matches the one in README.md for tensorflow-sys.
version_tensorflow_sys_crate=`grep "^version =" tensorflow-sys/Cargo.toml | sed 's|.*= "\(.*\)"|\1|g'`
version_tensorflow_sys_readme=`sed -En 's|tensorflow-sys *= *\{ *version *= *"([^"]*)".*$|\1|p' < tensorflow-sys/README.md`
if [[ "${version_tensorflow_sys_crate}" != "${version_tensorflow_sys_readme}" ]]; then
    echo "ERROR: tensorflow-sys crate version does not match the one in README.md."
    echo "       Cargo.toml: ${version_tensorflow_sys_crate}"
    echo "       README.md: ${version_tensorflow_sys_readme}"
    exit 1
fi

cargo fmt --all -- --check
cargo test -vv -j 2 --features tensorflow_unstable
cargo run --example regression
cargo run --features tensorflow_unstable --example expressions
cargo doc -vv --features tensorflow_unstable
# TODO(#66): Re-enable: (cd tensorflow-sys && cargo test -vv -j 1)
(cd tensorflow-sys && cargo run --example multiplication)
(cd tensorflow-sys && cargo doc -vv)

bad_deprecations="$(grep -n '#\[deprecated' src -r --include=*.rs | grep -E -v '([^"\\]|\\.|"([^"\\]|\\.)*")*since' || true)"
if [[ "${bad_deprecations}" != "" ]]; then
    echo "ERROR: #[deprecated] attribute(s) found with no 'since' key:"
    echo "${bad_deprecations}"
    exit 1
fi

bad_deprecations="$(grep -n '#\[deprecated' src -r --include=*.rs | grep -E -v '([^"\\]|\\.|"([^"\\]|\\.)*")*note' || true)"
if [[ "${bad_deprecations}" != "" ]]; then
    echo "ERROR: #[deprecated] attribute(s) found with no 'note' key:"
    echo "${bad_deprecations}"
    exit 1
fi
